// Test generated by RoostGPT for test ReactUnitTesting using AI Type Open AI and AI Model gpt-4-1106-preview


import axios from 'axios';
import { Post, Get, Put } from '../../Utils/JSONUtil';

jest.mock('axios');

describe('JSONUtil', () => {
  beforeEach(() => {
    jest.resetAllMocks(); // Ensure mocks are cleared before each test
  });

  describe('Post', () => {
    test('should successfully post data to an API', async () => {
      const mockData = { name: 'Test User' };
      const mockResponse = { data: mockData };
      axios.post.mockResolvedValue(mockResponse);

      const result = await Post('http://example.com/api', mockData);

      expect(axios.post).toHaveBeenCalledWith('http://example.com/api', mockData);
      expect(result).toEqual(mockResponse);
    });

    test('should handle failure when posting data to an API', async () => {
      const mockData = { name: 'Test User' };
      const error = new Error('Network Error');
      axios.post.mockRejectedValue(error);

      await expect(Post('http://example.com/api', mockData)).rejects.toThrow('Network Error');
    });
  });

  describe('Get', () => {
    test('should successfully fetch data from an API', async () => {
      const mockResponse = { data: [{ id: 1, title: 'mock title' }] };
      axios.get.mockResolvedValue(mockResponse);

      const result = await Get('http://example.com/api');

      expect(axios.get).toHaveBeenCalledWith('http://example.com/api');
      expect(result).toEqual(mockResponse);
    });

    test('should handle failure when fetching data from an API', async () => {
      const error = new Error('Network Error');
      axios.get.mockRejectedValue(error);

      await expect(Get('http://example.com/api')).rejects.toThrow('Network Error');
    });
  });

  describe('Put', () => {
    test('should successfully update data on an API', async () => {
      const mockData = { name: 'Updated Test User' };
      const mockResponse = { data: mockData };
      axios.put.mockResolvedValue(mockResponse);

      const result = await Put('http://example.com/api/1', mockData);

      expect(axios.put).toHaveBeenCalledWith('http://example.com/api/1', mockData);
      expect(result).toEqual(mockResponse);
    });

    test('should handle failure when updating data on an API', async () => {
      const mockData = { name: 'Updated Test User' };
      const error = new Error('Network Error');
      axios.put.mockRejectedValue(error);

      await expect(Put('http://example.com/api/1', mockData)).rejects.toThrow('Network Error');
    });
  });
});

