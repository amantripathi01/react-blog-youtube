// Test generated by RoostGPT for test ReactUnitTesting using AI Type Open AI and AI Model gpt-4-1106-preview


import { register, unregister } from '../src/serviceWorker';

describe('serviceWorker.js', () => {

  // Define global mocks for navigator.serviceWorker and window.location here
  beforeEach(() => {
    // Clear all mocks before each test
    jest.clearAllMocks();
  });

  describe('register function', () => {

    test('should not register a service worker when not in production environment', () => {
      // Mocking production environment as false
      process.env.NODE_ENV = 'development';
      // Implement the actual test here...

      // Assertions would go here...
      expect(navigator.serviceWorker.register).not.toHaveBeenCalled();
    });

    test('should register a service worker when in production environment and serviceWorker is available', () => {
      // Mocking production environment as true
      process.env.NODE_ENV = 'production';
      // Implement the actual test here...

      // Assertions would go here...
      expect(navigator.serviceWorker.register).toHaveBeenCalled();
    });

    // Additional tests can be written for the 'config' object behavior, error handling, etc.

  });

  describe('unregister function', () => {

    test('should unregister a service worker if supported', () => {
      // Mocking serviceWorker in navigator
      // Implement the actual test here...

      // Assertions would go here...
      expect(navigator.serviceWorker.unregister).toHaveBeenCalled();
    });

    // Additional tests can be written for error handling during service worker unregistration.

  });

  // Additional utility function tests, and edge case scenarios can be written as needed based on the logic in serviceWorker.js

});

