// Test generated by RoostGPT for test ReactUnitTesting using AI Type Open AI and AI Model gpt-4-1106-preview


// First, set up the necessary mocks for external hooks and modules.
jest.mock("react-router-dom", () => ({
  useHistory: () => ({
    push: jest.fn(),
  }),
}));

jest.mock("react-query", () => ({
  useMutation: jest.fn(),
}));

jest.mock("../Utils/JSONUtil", () => ({
  Post: jest.fn(),
}));

// Import statements for testing utilities
import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import PostEdit from '../../../src/pages/PostEdit';

// Test suite for the PostEdit component
describe('PostEdit', () => {
  const mockPush = jest.fn();
  const mockMutate = jest.fn();
  
  beforeEach(() => {
    // Mock implementation for useHistory and useMutation
    (useHistory as jest.Mock).mockReturnValue({ push: mockPush });
    (useMutation as jest.Mock).mockReturnValue([mockMutate]);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('renders PostManage component', () => {
    const { getByTestId } = render(<PostEdit />);
    expect(getByTestId('post-manage-component')).toBeInTheDocument();
  });

  test('submits form data and redirects on success', async () => {
    const { getByTestId } = render(<PostEdit />);
    const submitButton = getByTestId('submit-button');

    // Mock a successful mutation
    mockMutate.mockResolvedValueOnce({});

    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(mockMutate).toHaveBeenCalledWith({
        title: 'Test Title',
        description: 'Test Description'
      });
      expect(mockPush).toHaveBeenCalledWith('/posts');
    });
  });

  test('displays error on form submission failure', async () => {
    const { getByTestId } = render(<PostEdit />);
    const submitButton = getByTestId('submit-button');

    // Mock a failed mutation
    mockMutate.mockRejectedValueOnce(new Error('Failed to create post'));

    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(mockMutate).toHaveBeenCalledWith({
        title: 'Test Title',
        description: 'Test Description'
      });
      expect(getByTestId('error-message')).toHaveTextContent('Failed to create post');
    });
  });
});

