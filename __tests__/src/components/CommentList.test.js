// Test generated by RoostGPT for test ReactUnitTesting using AI Type Open AI and AI Model gpt-4-1106-preview


import React from 'react';
import { render, waitFor } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from 'react-query';
import CommentList from '../../../src/components/CommentList';
import { useColorMode, useTheme } from '@chakra-ui/core';

// Mocking the necessary function and modules
jest.mock('../../../src/Utils/JSONUtil', () => ({
  Get: jest.fn(),
}));

jest.mock('@chakra-ui/core', () => ({
  ...jest.requireActual('@chakra-ui/core'),
  useColorMode: jest.fn(),
  useTheme: jest.fn(),
}));

// Sample data for our tests
const comments = [
  { id: 1, content: 'First comment' },
  { id: 2, content: 'Second comment' },
];

// Creating a test QueryClient to wrap our component
const createTestQueryClient = () =>
  new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
      },
    },
  });

const testQueryClient = createTestQueryClient();
const Wrapper = ({ children }) => (
  <QueryClientProvider client={testQueryClient}>{children}</QueryClientProvider>
);

describe('CommentList component', () => {
  beforeAll(() => {
    useTheme.mockReturnValue({
      colors: {
        gray: {
          '900': 'darkgray',
          '100': 'lightgray',
        },
      },
    });
  });

  test('Renders loading state', () => {
    const { Get } = require('../../../src/Utils/JSONUtil');
    Get.mockImplementation(() => Promise.resolve());
    const { getByText } = render(
      <Wrapper>
        <CommentList postId="1" />
      </Wrapper>
    );
    expect(getByText('Loading...')).toBeInTheDocument();
  });

  test('Renders error state', async () => {
    const { Get } = require('../../../src/Utils/JSONUtil');
    Get.mockImplementation(() => Promise.reject());
    const { getByText } = render(
      <Wrapper>
        <CommentList postId="1" />
      </Wrapper>
    );
    await waitFor(() => {
      expect(getByText('Something went wrong')).toBeInTheDocument();
    });
  });

  test('Renders comments correctly', async () => {
    const { Get } = require('../../../src/Utils/JSONUtil');
    Get.mockImplementation(() =>
      Promise.resolve({ data: comments })
    );
    const { getByText } = render(
      <Wrapper>
        <CommentList postId="1" />
      </Wrapper>
    );
    await waitFor(() => {
      expect(getByText('First comment')).toBeInTheDocument();
      expect(getByText('Second comment')).toBeInTheDocument();
    });
  });

  test('Applies correct theme color depending on color mode', async () => {
    const { Get } = require('../../../src/Utils/JSONUtil');
    Get.mockImplementation(() =>
      Promise.resolve({ data: comments })
    );
    useColorMode.mockReturnValue({ colorMode: 'dark' });

    const { getByText } = render(
      <Wrapper>
        <CommentList postId="1" />
      </Wrapper>
    );
    
    await waitFor(() => {
      const firstCommentListItem = getByText('First comment');
      expect(firstCommentListItem).toHaveStyle('background: darkgray');
    });
  });
});

