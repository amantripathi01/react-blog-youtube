// Test generated by RoostGPT for test ReactUnitTesting using AI Type Open AI and AI Model gpt-4-1106-preview


// __tests__/src/components/CommentEdit.test.js

import React from 'react';
import { render, fireEvent, act, screen, waitFor } from '@testing-library/react';
import CommentEdit from '../../../src/components/CommentEdit';
import { queryCache } from '../../../src/reactQuery';
import * as JSONUtil from '../../../src/Utils/JSONUtil';

// Mock react-query and JSONUtil dependencies
jest.mock('../../../src/reactQuery', () => ({
  queryCache: {
    refetchQueries: jest.fn(),
  },
}));
jest.mock('../../../src/Utils/JSONUtil', () => ({
  Post: jest.fn(),
}));

describe('CommentEdit component', () => {
  beforeEach(() => {
    // Reset mocks before each test
    JSONUtil.Post.mockReset();
    queryCache.refetchQueries.mockReset();
  });

  test('renders without crashing', () => {
    render(<CommentEdit postId="1" />);
    expect(screen.getByLabelText('Comment Content')).toBeInTheDocument();
  });

  test('calls Post function with correct parameters when submitted', async () => {
    JSONUtil.Post.mockResolvedValueOnce({ data: { id: '123', content: 'Test comment', postId: '1' } });

    render(<CommentEdit postId="1" />);
    const input = screen.getByLabelText('Comment Content');
    fireEvent.change(input, { target: { value: 'Test comment' } });
    const form = screen.getByRole('form');
    await act(async () => {
      fireEvent.submit(form);
    });

    expect(JSONUtil.Post).toHaveBeenCalledWith('http://localhost:3002/comments', { content: 'Test comment', postId: '1' });
  });

  test('clears input field after successful submission', async () => {
    JSONUtil.Post.mockResolvedValueOnce({ data: { id: '123', content: 'Test comment', postId: '1' } });

    render(<CommentEdit postId="1" />);
    const input = screen.getByLabelText('Comment Content');
    fireEvent.change(input, { target: { value: 'Test comment' } });
    const form = screen.getByRole('form');
    await act(async () => {
      fireEvent.submit(form);
    });

    await waitFor(() => expect(input.value).toBe(''));
  });

  // Add more tests here for failure cases, edge cases, and error handling
});

