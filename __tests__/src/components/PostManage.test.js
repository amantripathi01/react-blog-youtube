// Test generated by RoostGPT for test ReactUnitTesting using AI Type Open AI and AI Model gpt-4-1106-preview


// __tests__/src/components/PostManage.test.js

import React from 'react';
import { render, fireEvent } from '@testing-library/react'; // assuming testing-library is being used
import { useForm } from 'react-hook-form';
import PostManage from '../../../src/components/PostManage';

jest.mock('react-hook-form', () => ({
  ...jest.requireActual('react-hook-form'),
  useForm: jest.fn(),
}));

describe('PostManage component', () => {
  // Common setup for our tests
  const defaultTitle = 'Sample Title';
  const defaultDescription = 'Sample Description';
  const onSubmitMock = jest.fn();

  beforeEach(() => {
    // Clear all previous interactions before each test
    onSubmitMock.mockClear();

    // Mock useForm return value before each test
    useForm.mockReturnValue({
      control: {},
      handleSubmit: (cb) => (e) => {
        e.preventDefault();
        cb({ title: defaultTitle, description: defaultDescription });
      },
      errors: {},
    });
  });

  test('renders with default props', () => {
    const { getByLabelText } = render(
      <PostManage onSubmit={onSubmitMock} />
    );

    expect(getByLabelText(/Title/i)).toHaveValue('');
    expect(getByLabelText(/Description/i)).toHaveValue('');
  });

  test('renders with given title and description', () => {
    const { getByLabelText } = render(
      <PostManage
        onSubmit={onSubmitMock}
        defaultTitle={defaultTitle}
        defaultDescription={defaultDescription}
      />
    );

    expect(getByLabelText(/Title/i)).toHaveValue(defaultTitle);
    expect(getByLabelText(/Description/i)).toHaveValue(defaultDescription);
  });

  test('submits correct values', () => {
    const { getByLabelText, getByText } = render(
      <PostManage onSubmit={onSubmitMock} />
    );

    fireEvent.change(getByLabelText(/Title/i), {
      target: { value: defaultTitle },
    });
    fireEvent.change(getByLabelText(/Description/i), {
      target: { value: defaultDescription },
    });
    fireEvent.click(getByText(/Add Blog/i));

    expect(onSubmitMock).toHaveBeenCalledWith({
      title: defaultTitle,
      description: defaultDescription,
    });
  });

  test('displays validation errors', () => {
    useForm.mockReturnValue({
      control: {},
      handleSubmit: jest.fn(),
      errors: {
        title: {
          message: 'Title is required',
        },
      },
    });

    const { getByText } = render(
      <PostManage onSubmit={onSubmitMock} />
    );

    fireEvent.click(getByText(/Add Blog/i));

    expect(getByText(/Title is required/i)).toBeInTheDocument();
  });

  // Additional tests should be written to cover all scenarios,
  // including invalid input length, error messages for each field,
  // and testing of conditional button text (Add Blog/Edit Blog).
});


