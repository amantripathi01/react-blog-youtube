// Test generated by RoostGPT for test ReactUnitTesting using AI Type Open AI and AI Model gpt-4-1106-preview


// Importing required libraries and utilities
import React from 'react';
import { render, waitFor, screen } from '@testing-library/react';
// Importing the necessary mocks for react-query
import { queryCache } from 'react-query';
jest.mock('react-query', () => ({
  useQuery: jest.fn()
}));
// need to properly import actual used hook from Chakra's UI library
import { useColorMode } from '@chakra-ui/core'; 

// Importing the CommentList component from the relative path
import CommentList from '../../src/components/CommentList';

// Defining a test suite for the CommentList component
describe('CommentList', () => {
  // Mocking hooks and functions
  const mockRefetch = jest.fn();

  // Mock implementation for useQuery
  useQuery.mockImplementation(() => ({
    isLoading: false,
    error: null,
    data: { data: [] },
    refetch: mockRefetch
  }));
  
  const mockColorMode = 'light'; // A mock color mode
  // Mock implementation for useColorMode
  useColorMode.mockReturnValue({ colorMode: mockColorMode });

  test('renders without crashing', () => {
    render(<CommentList postId={1} />);
  });

  test('displays loading when fetching comments', () => {
    useQuery.mockImplementationOnce(() => ({
      isLoading: true,
      error: null,
      data: null,
      refetch: mockRefetch
    }));
    render(<CommentList postId={1} />);
    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });

  test('displays error message on fetch error', () => {
    useQuery.mockImplementationOnce(() => ({
      isLoading: false,
      error: new Error('Failed to fetch'),
      data: null,
      refetch: mockRefetch
    }));
    render(<CommentList postId={1} />);
    expect(screen.getByText('Something went wrong')).toBeInTheDocument();
  });

  test('successfully show comments when data is fetched', async () => {
    const comments = [
      { id: 'comment1', content: 'Comment 1' },
      { id: 'comment2', content: 'Comment 2' }
    ];
    useQuery.mockImplementationOnce(() => ({
      isLoading: false,
      error: null,
      data: { data: comments },
      refetch: mockRefetch
    }));
    render(<CommentList postId={1} />);
    await waitFor(() => {
      comments.forEach(comment => {
        expect(screen.getByText(comment.content)).toBeInTheDocument();
      });
    });
  });

  // additional tests for checking color mode and theme could be added here, once we mock `useTheme`

  // Cleanup mock after all tests are done
  afterAll(() => {
    jest.resetAllMocks();
  });
});

